<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="studentMapper">
	<resultMap type="kh.study.academy.student.vo.StudentVO" 		id="student">
		<id column="STUDENT_CODE"									property="studentCode"/>
		<result column="STUDENT_NAME" 								property="studentName"/>
		<result column="STUDENT_GENDER" 							property="studentGender"/>
		<result column="BIRTHDAY" 									property="birthday"/>
		<result column="STUDENT_YEAR" 								property="studentYear"/>
		<result column="ADDR" 										property="addr"/>
		<result column="ADDR_DETAIL"								property="addrDetail"/>
		<result column="STUDENT_TELL"								property="studentTell"/>
		<result column="REG_DATE" 									property="regDate"/>
		<result column="IS_PAY" 									property="isPay"/>
		<result column="TEACHER_NAME" 								property="teacherName"/>
		<result column="PAYMENT_CODE" 								property="paymentCode"/>
		<result column="STUDENT_STATUS" 								property="studentStatus"/>
		
		<collection property="studentLessonInfoList" 				resultMap="studentLessonInfo"/>
		
		<!-- <collection property="subjectVO" 							resultMap="adminMapper.subject" /> -->
		<collection property="testList" 							resultMap="testMapper.test" />
	</resultMap>
	
	<resultMap type="kh.study.academy.student.vo.StudentLessonInfoVO"   id="studentLessonInfo">
		<id column="STUDENT_LESSON_CODE" 								property="studentLessonCode" />
		<result column="LESSON_INFO_CODE"								property="lessonInfoCode"/>
		<result column="ATTENDANCE_CODE" 								property="attendanceCode"/>
		<result column="STUDENT_CODE" 									property="studentCode"/>
		
		<association property="lessonInfoVO" resultMap="lessonMapper.lessonInfo"/>
	<!-- 	<association property="studentVO" resultMap="student"/> -->
	</resultMap>
	
	
	
	<resultMap type="kh.study.academy.student.vo.PaymentVO" 		id="payment">
		<id column="PAYMENT_CODE" 									property="paymentCode" />
		<result column="STUDENT_LESSON_CODE" 						property="studentLessonCode"/>
		<result column="IS_PAY"										property="isPay"/>
	</resultMap>
	

<select id="getNextStudentCode" resultType="String">
	 SELECT 'STUDENT_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STUDENT_CODE, 9))),0) +1, 3, 0) 
	  FROM STUDENT
</select>


<!-- 학생 등록 -->
<insert id="insertStudent">
	INSERT INTO STUDENT (
		STUDENT_CODE
		, STUDENT_NAME
		, STUDENT_GENDER
		, BIRTHDAY
		, STUDENT_YEAR
		, ADDR
		, ADDR_DETAIL
		, STUDENT_TELL	
		, STUDENT_STATUS	
	) VALUES (
		#{studentCode}
		, #{studentName}
		, #{studentGender}
		, #{birthday}
		, #{studentYear}
		, #{addr}
		, #{addrDetail}
		, #{studentTell}
		, 'Y'
	)
</insert>



<!-- 학생 리스트 조회 -->
<select id="selectStuList" resultMap="student">
	SELECT S.STUDENT_CODE
       , STUDENT_NAME
       , STUDENT_YEAR
       , DECODE(STUDENT_GENDER, 'W', '여', '남') AS STUDENT_GENDER
       , SL.STUDENT_LESSON_CODE
       , L.LESSON_INFO_CODE
       , (SELECT SUBJECT_NAME
               FROM SUBJECT
               WHERE SUBJECT_CODE = L.SUBJECT_CODE) AS SUBJECT_NAME
       , (SELECT STEP_NAME
               FROM STEP
               WHERE STEP_CODE = L.STEP_CODE) AS STEP_NAME
       , (SELECT TEACHER_NAME
				FROM TEACHER
				WHERE TEACHER_CODE = L.TEACHER_CODE) AS TEACHER_NAME
       , YEAR
       , (SELECT PAYMENT_CODE
					FROM PAYMENT
					WHERE STUDENT_LESSON_CODE = P.STUDENT_LESSON_CODE) AS PAYMENT_CODE
       , IS_PAY
   FROM LESSON_INFO L, STUDENT_LESSON_INFO SL , STUDENT S, PAYMENT P
   WHERE S.STUDENT_CODE = SL.STUDENT_CODE (+)
    AND L.LESSON_INFO_CODE (+) = SL.LESSON_INFO_CODE
    AND SL.STUDENT_LESSON_CODE = P.STUDENT_LESSON_CODE(+)
    <if test="_parameter != null and !_parameter.equals('')">
      AND STUDENT_NAME LIKE '%' || #{studentName} || '%'
   </if>
   AND STUDENT_STATUS = 'Y'
   ORDER BY S.STUDENT_CODE DESC
</select>


	
<!-- 학생 상세 조회 -->	
<select id="selectStuDetail" resultMap="student">
	SELECT S.STUDENT_CODE
	    , STUDENT_NAME
	    , STUDENT_YEAR
	    , DECODE(STUDENT_GENDER, 'W', '여', '남') AS STUDENT_GENDER
	    , TO_CHAR(BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
		, ADDR||' ' ||ADDR_DETAIL AS ADDR
		, STUDENT_TELL
		, TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE 
	    , STUDENT_LESSON_CODE
	    , L.LESSON_INFO_CODE
	    , MAX_STUDENT 
        , NOW_STUDENT_CNT
        , MONEY
	    , (SELECT SUBJECT_NAME
					FROM SUBJECT
					WHERE SUBJECT_CODE = L.SUBJECT_CODE) AS SUBJECT_NAME
	    , (SELECT STEP_NAME
					FROM STEP
					WHERE STEP_CODE = L.STEP_CODE) AS STEP_NAME
		, (SELECT TEACHER_NAME
					FROM TEACHER
					WHERE TEACHER_CODE = L.TEACHER_CODE) AS TEACHER_NAME
	    , YEAR
	FROM LESSON_INFO L, STUDENT_LESSON_INFO SL , STUDENT S 
	WHERE S.STUDENT_CODE = SL.STUDENT_CODE (+)
    AND L.LESSON_INFO_CODE (+) = SL.LESSON_INFO_CODE
    AND S.STUDENT_CODE = #{studentCode}
</select>



<!-- 학생 수납상태 변경 -->
<update id="stuUpdateIsPay">
	UPDATE PAYMENT
	SET IS_PAY = #{isPay}
	WHERE PAYMENT_CODE = #{paymentCode}
</update>



<!-- 달 바뀔 때 수납상태 N으로 변경 -->
<update id="stuUpdateIsPayNone">
	UPDATE PAYMENT
	SET IS_PAY = 'N'
</update>




<!-- 학생 수정페이지 상세조회 -->
<select id="selectStuDetailForUpdate" resultMap="student">
	SELECT S.STUDENT_CODE
	    , STUDENT_NAME
	    , STUDENT_YEAR
	    , DECODE(STUDENT_GENDER, 'W', '여', '남') AS STUDENT_GENDER
	    , TO_CHAR(BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
		, ADDR
		, ADDR_DETAIL
		, STUDENT_TELL
		, TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE 
	    , STUDENT_LESSON_CODE
	    , L.LESSON_INFO_CODE
	    , MAX_STUDENT 
        , NOW_STUDENT_CNT
        , MONEY
        , LESSON_DAY_CODE
	    , (SELECT SUBJECT_NAME
					FROM SUBJECT
					WHERE SUBJECT_CODE = L.SUBJECT_CODE) AS SUBJECT_NAME
	    , (SELECT STEP_NAME
					FROM STEP
					WHERE STEP_CODE = L.STEP_CODE) AS STEP_NAME
	    , YEAR
	FROM LESSON_INFO L, STUDENT_LESSON_INFO SL , STUDENT S
	WHERE S.STUDENT_CODE = SL.STUDENT_CODE (+)
    AND L.LESSON_INFO_CODE (+) = SL.LESSON_INFO_CODE
    AND S.STUDENT_CODE = #{studentCode}
</select>
	
	

<!-- 학생 선택 삭제 (status 'N' 변경) -->	
<update id="deleteCheckedStu">
	UPDATE STUDENT    
	SET STUDENT_STATUS = 'N'
	WHERE STUDENT_CODE IN 
	<foreach collection="studentCodeList" item="studentCode" separator="," open="(" close=")">
		#{studentCode}
	</foreach>
</update>
	

<!-- 학생 삭제 (status 'N' 변경) -->	
<update id="deleteStu">
	UPDATE STUDENT 
	SET STUDENT_STATUS = 'N'   
	WHERE STUDENT_CODE = #{studentCode}
</update>



<!-- 학생 수정 -->
<update id="updateStu">
	UPDATE STUDENT
	SET STUDENT_TELL = #{studentTell}
		, ADDR = #{addr}
		, ADDR_DETAIL = #{addrDetail}
	WHERE STUDENT_CODE = #{studentCode}
</update>
	
	
<!-- 학급에 학생 편성 -->
<insert id="assignStu" >
	<selectKey resultType="String" keyProperty="studentLessonCode" order="BEFORE">
	   SELECT 'STU_LESSON_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STUDENT_LESSON_CODE, 12))),0) +1, 3, 0) 
	   FROM STUDENT_LESSON_INFO
	</selectKey>
	
	INSERT INTO STUDENT_LESSON_INFO(
		STUDENT_LESSON_CODE
		, STUDENT_CODE
		, LESSON_INFO_CODE
	) VALUES (
		#{studentLessonCode}
		, #{studentCode}
		, #{lessonInfoCode}
	)
	 
</insert>


<!-- 중복 학생 편성 조회 -->

<select id="isStuAssign" resultMap="studentLessonInfo">
	SELECT LESSON_INFO_CODE 
	FROM STUDENT_LESSON_INFO
	WHERE STUDENT_CODE = #{studentCode}
</select>



<!-- 수납코드 생성 -->
<insert id="createPayment">
	
	<selectKey resultType="String" keyProperty="paymentCode" order="BEFORE">
	   SELECT 'PAYMENT_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PAYMENT_CODE, 9))),0) +1, 3, 0) 
	   FROM PAYMENT
	</selectKey>
	
	INSERT INTO PAYMENT(
		PAYMENT_CODE
		, STUDENT_LESSON_CODE
	) VALUES (
		#{paymentCode}
		, (SELECT STUDENT_LESSON_CODE 
			FROM STUDENT_LESSON_INFO 
			WHERE STUDENT_CODE = #{studentCode}
			AND LESSON_INFO_CODE = #{lessonInfoCode})
	)
</insert>





<!-- 모든학생이 듣고 있는 수업 조회 -->
<select id="selectStuLessonList" resultMap="student">

	SELECT S.STUDENT_CODE
	    , STUDENT_NAME
	    , STUDENT_YEAR
	    , STUDENT_TELL
	    , DECODE(STUDENT_GENDER, 'W', '여', '남') AS STUDENT_GENDER
	    , SL.STUDENT_LESSON_CODE
	    , L.LESSON_INFO_CODE
	    , (SELECT SUBJECT_NAME
					FROM SUBJECT
					WHERE SUBJECT_CODE = L.SUBJECT_CODE) AS SUBJECT_NAME
	    , (SELECT STEP_NAME
					FROM STEP
					WHERE STEP_CODE = L.STEP_CODE) AS STEP_NAME
	    , YEAR
	    , MONEY
	    , LESSON_DAY_CODE
	    , IS_PAY
	FROM LESSON_INFO L, STUDENT_LESSON_INFO SL , STUDENT S, PAYMENT P
	WHERE S.STUDENT_CODE = SL.STUDENT_CODE (+)
    AND L.LESSON_INFO_CODE (+) = SL.LESSON_INFO_CODE
    AND SL.STUDENT_LESSON_CODE = P.STUDENT_LESSON_CODE(+)
    AND STUDENT_STATUS = 'Y'
	ORDER BY STUDENT_CODE DESC
</select>

<!-- 학생 학급이동 -->
<update id="updateStuLesson">
	UPDATE STUDENT_LESSON_INFO
	SET LESSON_INFO_CODE = #{lessonInfoCode}
	WHERE STUDENT_LESSON_CODE = #{studentLessonCode}
</update>

<!-- 학급별 학생 목록 조회 -->
<select id="stuListByLesson" resultMap="student">
	SELECT STUDENT_NAME
		, S.STUDENT_CODE
	    , SL.STUDENT_LESSON_CODE
	    , L.LESSON_INFO_CODE 
	FROM STUDENT S, LESSON_INFO L, STUDENT_LESSON_INFO SL
	WHERE SL.STUDENT_CODE = S.STUDENT_CODE
	AND SL.LESSON_INFO_CODE = L.LESSON_INFO_CODE
	AND L.LESSON_INFO_CODE= #{lessonInfoCode}
	ORDER BY STUDENT_NAME
</select>



	
</mapper>



